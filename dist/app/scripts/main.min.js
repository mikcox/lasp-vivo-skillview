"use strict";

var skillsModule = angular.module("skillsModule", [ "ngDragDrop", "mapaskillFilters", "ui.bootstrap" ]);

skillsModule.config(function($routeProvider, $httpProvider) {
    $routeProvider.when("/", {
        controller: "allSkillsCtrl",
        templateUrl: "views/all-skills.html"
    }).when("/mapaskill", {
        controller: "mapASkillCtrl",
        templateUrl: "views/map-a-skill.html"
    }).otherwise({
        redirectTo: "/"
    }), $httpProvider.defaults.withCredentials = !0, delete $httpProvider.defaults.headers.common["X-Requested-With"], 
    delete $httpProvider.defaults.headers.post["Content-Type"];
}), skillsModule.factory("dataFactory", function($http) {
    var dataFactory = {};
    return dataFactory.getSPARQLQuery = function(urlBase, queryStr) {
        var query = "query=" + escape(queryStr);
        return $http.post(urlBase, query, {
            headers: {
                Accept: "application/sparql-results+json",
                "Content-type": "application/x-www-form-urlencoded"
            }
        });
    }, dataFactory;
}), skillsModule.factory("formatFactory", function() {
    var formatFactory = {};
    return formatFactory.formatMasterList = function(data) {
        for (var fixedList = [], tmpPerson = "", tmpSkill = "", tmpOffice = "", tmpEmail = "", tmpPhone = "", tmpPosition = "", tmpDivision = "", tmpGroup = "", tmpPersonURI = "", tmpSkillURI = "", duplicateRows = [], cursor = 0, i = 0; data.results.bindings.length > i; i++) if (-1 === duplicateRows.indexOf(i)) {
            for (tmpPerson = data.results.bindings[i].Person.value, tmpPersonURI = data.results.bindings[i].personuri.value, 
            tmpSkill = data.results.bindings[i].SkillLevel.value, tmpSkillURI = data.results.bindings[i].skillleveluri.value, 
            tmpOffice = data.results.bindings[i].hasOwnProperty("Office") ? data.results.bindings[i].Office.value : "", 
            tmpEmail = data.results.bindings[i].hasOwnProperty("Email") ? data.results.bindings[i].Email.value : "", 
            tmpPhone = data.results.bindings[i].hasOwnProperty("PhoneNumber") ? data.results.bindings[i].PhoneNumber.value : "", 
            tmpPosition = data.results.bindings[i].hasOwnProperty("Position") ? data.results.bindings[i].Position.value : "", 
            tmpDivision = data.results.bindings[i].hasOwnProperty("Division") ? data.results.bindings[i].Division.value : "", 
            tmpGroup = data.results.bindings[i].hasOwnProperty("Group") ? data.results.bindings[i].Group.value : "", 
            cursor = i + 1; data.results.bindings.length > cursor; cursor++) data.results.bindings[i].Person.value === data.results.bindings[cursor].Person.value && data.results.bindings[i].SkillLevel.value === data.results.bindings[cursor].SkillLevel.value && (duplicateRows.push(cursor), 
            data.results.bindings[i].Office.value !== data.results.bindings[cursor].Office.value && (tmpOffice = tmpOffice + ", " + data.results.bindings[cursor].Office.value), 
            data.results.bindings[i].PhoneNumber.value !== data.results.bindings[cursor].PhoneNumber.value && (tmpPhone = tmpPhone + ", " + data.results.bindings[cursor].PhoneNumber.value), 
            data.results.bindings[i].Position.value !== data.results.bindings[cursor].Position.value && (tmpPosition = tmpPosition + ", " + data.results.bindings[cursor].Position.value), 
            data.results.bindings[i].Division.value !== data.results.bindings[cursor].Division.value && (tmpDivision = tmpDivision + ", " + data.results.bindings[cursor].Division.value), 
            data.results.bindings[i].Group.value !== data.results.bindings[cursor].Group.value && (tmpGroup = tmpGroup + ", " + data.results.bindings[cursor].Group.value));
            fixedList.push({
                Person: tmpPerson,
                PersonURI: tmpPersonURI,
                Skill: tmpSkill,
                SkillURI: tmpSkillURI,
                Office: tmpOffice,
                Email: tmpEmail,
                PhoneNumber: tmpPhone,
                Position: tmpPosition,
                Division: tmpDivision,
                Group: tmpGroup
            });
        }
        return data = fixedList;
    }, formatFactory.formatPersonnelList = function(data) {
        for (var list = [], i = 0; data.results.bindings.length > i; i++) list.push({
            person: data.results.bindings[i].person.value,
            uri: data.results.bindings[i].personuri.value
        });
        return list;
    }, formatFactory.formatSkillList = function(data) {
        for (var levelList = [], list = [], i = 0; data.results.bindings.length > i; ) {
            levelList = [];
            var cursor = i + 1;
            for (levelList.push({
                skilllevel: data.results.bindings[i].skilllevel.value,
                skillleveluri: data.results.bindings[i].skillleveluri.value
            }); data.results.bindings[i].skill.value === data.results.bindings[cursor].skill.value && (levelList.push({
                skilllevel: data.results.bindings[cursor].skilllevel.value,
                skillleveluri: data.results.bindings[cursor].skillleveluri.value
            }), data.results.bindings.length > cursor + 1); ) cursor++;
            if (list.push({
                skill: data.results.bindings[i].skill.value,
                levels: levelList
            }), !(data.results.bindings.length > cursor + 1)) break;
            i = cursor;
        }
        return list;
    }, formatFactory;
});

var filterMod = angular.module("mapaskillFilters", []);

filterMod.filter("QuickSearch", function() {
    return function(haystack, needle, searchkey) {
        var returnList = [];
        if (!needle || 1 > needle.length) return [];
        if ("$all" === needle) return haystack.sort(function(a, b) {
            return a[searchkey].toUpperCase() < b[searchkey].toUpperCase() ? -1 : a[searchkey].toUpperCase() > b[searchkey].toUpperCase() ? 1 : 0;
        }), haystack;
        for (var needleWordList = needle.split(" "), allWordMatch = !0, i = 0; haystack.length > i; i++) {
            allWordMatch = !0;
            for (var j = 0; needleWordList.length > j; j++) if (-1 === haystack[i][searchkey].toUpperCase().indexOf(needleWordList[j].toUpperCase())) {
                allWordMatch = !1;
                break;
            }
            allWordMatch && returnList.push(haystack[i]);
        }
        return returnList.sort(function(a, b) {
            return a[searchkey].toUpperCase() < b[searchkey].toUpperCase() ? -1 : a[searchkey].toUpperCase() > b[searchkey].toUpperCase() ? 1 : 0;
        }), returnList;
    };
}), filterMod.filter("ViewAllSearch", function() {
    return function(haystack, needle) {
        var returnList = [];
        if (!needle || 3 > needle.length) return haystack.sort(function(a, b) {
            return a.Skill.toUpperCase() < b.Skill.toUpperCase() ? -1 : a.Skill.toUpperCase() > b.Skill.toUpperCase() ? 1 : 0;
        }), haystack;
        for (var needleWordList = needle.split(" "), allWordMatch = !0, allFieldsString = "", i = 0; haystack.length > i; i++) {
            allWordMatch = !0, allFieldsString = "";
            for (var key in haystack[i]) haystack[i].hasOwnProperty(key) && -1 === key.toUpperCase().indexOf("URI") && (allFieldsString += haystack[i][key]);
            for (var j = 0; needleWordList.length > j; j++) if (-1 === allFieldsString.toUpperCase().indexOf(needleWordList[j].toUpperCase())) {
                allWordMatch = !1;
                break;
            }
            allWordMatch && returnList.push(haystack[i]);
        }
        return returnList;
    };
}), skillsModule.controller("allSkillsCtrl", [ "$scope", "$filter", "dataFactory", "formatFactory", function($scope, $filter, dataFactory, formatFactory) {
    function ajaxSubmitDeletion(personuri, skilluri) {
        var deletionText = "personuri,leveluri\n";
        deletionText += personuri + "," + skilluri + "\n", $.ajax({
            type: "POST",
            url: "scripts/button_actions/removebuttonaction.php",
            data: {
                DeletionText: deletionText
            }
        });
    }
    $scope.filteredResults = [], $scope.pagedResults = [], $scope.currentPageResults = 1, 
    $scope.itemsPerPage = 20, $scope.maxPages = 10, $scope.urlBase = "http://lasp-db-dev:3030/VIVO/query", 
    $scope.queryStr = "PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX vivo: <http://vivoweb.org/ontology/core#> PREFIX laspskills: <http://webdev1.lasp.colorado.edu:57529/laspskills#>  SELECT ?Person ?personuri ?Skill ?SkillLevel ?skillleveluri ?Office ?Email ?PhoneNumber ?Position ?Division ?Group WHERE { ?personuri a foaf:Person . ?personuri rdfs:label ?Person . ?personuri laspskills:hasSkill ?skillleveluri . ?skillleveluri rdfs:label ?SkillLevel . ?skillleveluri laspskills:levelForSkill ?skilluri . ?skilluri rdfs:label ?Skill . OPTIONAL{?personuri vivo:primaryEmail ?Email}. OPTIONAL{?personuri vivo:hasFacility ?roomuri . ?roomuri rdfs:label ?Office} . OPTIONAL{?personuri vivo:phoneNumber ?PhoneNumber} . OPTIONAL{?personuri vivo:personInPosition ?positionuri . ?positionuri rdfs:label ?Position . ?positionuri vivo:positionInOrganization ?groupuri . ?groupuri rdfs:label ?Group . ?groupuri vivo:subOrganizationWithin ?divisionuri . ?divisionuri rdfs:label ?Division }}", 
    $scope.getPersonnel = function() {
        dataFactory.getSPARQLQuery($scope.urlBase, $scope.queryStr).success(function(data) {
            $scope.error = "", data && ($scope.skills = formatFactory.formatMasterList(data), 
            $scope.filterResults());
        }).error(function(data, status) {
            $scope.error = "Fuseki returned: " + status;
        });
    }, $scope.getPersonnel(), $scope.orderProp = "Skill", $scope.reverse = !1, $scope.DeleteButtonPressed = function(name, personuri, skill, skilluri) {
        var moveon = confirm("Delete " + name + "'s " + skill + " skill?");
        moveon && (alert("Deleting " + name + "'s " + skill + " skill.  Wait a moment and refresh your page to see the change."), 
        ajaxSubmitDeletion(personuri, skilluri));
    }, $scope.searchResults = function(person) {
        return person.length > 0 && ($scope.currentPageResults = 1), $scope.filterResults();
    }, $scope.filterResults = function() {
        return $scope.filteredResults = $filter("ViewAllSearch")($scope.skills, $scope.query), 
        $scope.filteredResults = $filter("orderBy")($scope.filteredResults, $scope.orderProp, $scope.reverse), 
        $scope.pagedResults = $scope.groupToPages($scope.filteredResults), $scope.filteredResults;
    }, $scope.groupToPages = function(list) {
        for (var pagedList = [], i = 0; list.length > i; i++) 0 === i % $scope.itemsPerPage ? pagedList[Math.floor(i / $scope.itemsPerPage)] = [ list[i] ] : pagedList[Math.floor(i / $scope.itemsPerPage)].push(list[i]);
        return pagedList;
    }, $scope.countPagedList = function(list) {
        var count = 0;
        if (list === void 0) return count;
        for (var i = 0; list.length > i; i++) count += list[i].length;
        return count;
    }, $scope.changeSorting = function(sort) {
        $scope.orderProp === sort ? $scope.reverse = !$scope.reverse : ($scope.orderProp = sort, 
        $scope.reverses = !1), $scope.filterResults();
    }, $scope.sortingClass = function(sort) {
        var cls;
        return cls = $scope.orderProp === sort ? $scope.reverse ? "sorting_asc" : "sorting_desc" : "sorting_both";
    };
} ]), skillsModule.controller("mapASkillCtrl", [ "$scope", "$filter", "dataFactory", "formatFactory", function($scope, $filter, dataFactory, formatFactory) {
    function getPersonnel() {
        $scope.personQueryStr = "PREFIX rdfs:  <http://www.w3.org/2000/01/rdf-schema#> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?person ?personuri WHERE{ ?personuri a foaf:Person . ?personuri rdfs:label ?person}", 
        dataFactory.getSPARQLQuery($scope.urlBase, $scope.personQueryStr).success(function(data) {
            $scope.error = "", data && ($scope.peoplelist = formatFactory.formatPersonnelList(data), 
            $scope.filterPeople());
        }).error(function(data, status) {
            $scope.error = "Fuseki person query returned: " + status;
        });
    }
    function getSkills() {
        $scope.skillQueryStr = "PREFIX laspcms: <http://localhost:8080/laspcms#> PREFIX rdfs:  <http://www.w3.org/2000/01/rdf-schema#> PREFIX laspskills: <http://webdev1.lasp.colorado.edu:57529/laspskills#> SELECT ?skill ?skilllevel ?skillleveluri WHERE{?skillleveluri a laspskills:SkillLevel . ?skillleveluri laspskills:levelForSkill ?skilluri . OPTIONAL{?skillleveluri laspcms:uniqueScoreID ?scoreid} . ?skilluri rdfs:label ?skill . ?skillleveluri rdfs:label ?skilllevel} ORDER BY asc(?skill) asc(?scoreid)", 
        dataFactory.getSPARQLQuery($scope.urlBase, $scope.skillQueryStr).success(function(data) {
            $scope.error = "", data && ($scope.skilllist = formatFactory.formatSkillList(data), 
            $scope.filterSkills());
        }).error(function(data, status) {
            $scope.error = "Fuseki person query returned: " + status;
        });
    }
    function ajaxSubmitNewSkillMap() {
        $.ajax({
            type: "POST",
            url: "scripts/button_actions/submitButtonActionNewSkill.php",
            data: {
                SubmitText: $scope.newSkillSubmitText
            }
        });
    }
    function ajaxSubmitExistingSkillMap() {
        $.ajax({
            type: "POST",
            url: "scripts/button_actions/submitButtonAction.php",
            data: {
                SubmitText: $scope.SubmitText
            }
        });
    }
    $scope.filteredPeople = [], $scope.filteredSkills = [], $scope.addPersonList = [], 
    $scope.addSkillList = [], $scope.currentPagePeople = 1, $scope.currentPageSkills = 1, 
    $scope.urlBase = "http://lasp-db-dev:3030/VIVO/query", getPersonnel(), getSkills(), 
    $scope.skillLevelDisplay = function(skill, skillLevel) {
        return skillLevel.replace(skill, "");
    }, $scope.filterSkills = function() {
        return $scope.filteredSkills = $filter("QuickSearch")($scope.skilllist, $scope.skillquery, "skill"), 
        $scope.pagedSkills = $scope.groupToPages($scope.filteredSkills), $scope.filteredSkills;
    }, $scope.filterPeople = function() {
        return $scope.filteredPeople = $filter("QuickSearch")($scope.peoplelist, $scope.personquery, "person"), 
        $scope.pagedPeople = $scope.groupToPages($scope.filteredPeople), $scope.filteredPeople;
    }, $scope.SubmitButtonPressed = function() {
        if (1 > $scope.addPersonList.length) return alert("Please select at least one person."), 
        void 0;
        if (1 > $scope.addSkillList.length) return alert("Please select at least one skill."), 
        void 0;
        $scope.SubmitText = "personuri,leveluri,skill\n", $scope.newSkillSubmitText = "personuri,skillname,level\n";
        for (var levelSelected = 0, addingNewSkill = !1, addingExistingSkill = !1, i = 0; $scope.addPersonList.length > i; i++) for (var j = 0; $scope.addSkillList.length > j; j++) levelSelected = document.getElementById($scope.addSkillList[j].skill).selectedIndex, 
        0 === $scope.addSkillList[j].levels[0].skillleveluri ? (addingNewSkill = !0, $scope.newSkillSubmitText += $scope.addPersonList[i].uri + ",", 
        $scope.newSkillSubmitText += $scope.addSkillList[j].skill + ",", $scope.newSkillSubmitText += $scope.addSkillList[j].levels[levelSelected].skillleveluri + "\n") : (addingExistingSkill = !0, 
        $scope.SubmitText += $scope.addPersonList[i].uri + ",", $scope.SubmitText += $scope.addSkillList[j].levels[levelSelected].skillleveluri + ",", 
        $scope.SubmitText += $scope.addSkillList[j].skill + "\n");
        if (addingNewSkill) {
            var moveOn = confirm("Warning: You are about to add a new skill to the database that didn't exist before.  Only click 'OK' if you are SURE that this skill (or any alternate way of spelling it) doesn't already exist in the database.");
            if (!moveOn) return;
        }
        document.getElementById("submitButtonDiv").innerHTML = '<img src="images/loading.gif"/><br>Working... ', 
        addingNewSkill && ajaxSubmitNewSkillMap(), addingExistingSkill && ajaxSubmitExistingSkillMap(), 
        setTimeout(function() {
            document.getElementById("submitButtonDiv").innerHTML = "Done. ";
        }, 5e3), setTimeout(function() {
            alert("New skill mapping added!"), location.reload();
        }, 5e3);
    }, $scope.removeFromAddPerson = function(index) {
        $scope.peoplelist.push($scope.addPersonList[index]), $scope.addPersonList.splice(index, 1), 
        $scope.filterPeople();
    }, $scope.addToPeople = function(person) {
        var actualIndex = $scope.peoplelist.indexOf(person);
        $scope.addPersonList.push($scope.peoplelist[actualIndex]), $scope.peoplelist.splice(actualIndex, 1), 
        $scope.filterPeople();
    }, $scope.removeFromAddSkill = function(index) {
        $scope.skilllist.push($scope.addSkillList[index]), $scope.addSkillList.splice(index, 1), 
        $scope.filterSkills();
    }, $scope.addToSkills = function(skill) {
        var actualIndex = $scope.skilllist.indexOf(skill);
        $scope.addSkillList.push($scope.skilllist[actualIndex]), $scope.skilllist.splice(actualIndex, 1), 
        $scope.filterSkills();
    }, $scope.addNewSkill = function(skill) {
        alert(skill + " will now be shown in the skill list.  Note that it will only be added to the database when you assign it to a person."), 
        $scope.skilllist.push({
            skill: skill,
            levels: [ {
                skilllevel: skill + " (unranked)",
                skillleveluri: "0"
            }, {
                skilllevel: skill + " beginner",
                skillleveluri: "1"
            }, {
                skilllevel: skill + " intermediate",
                skillleveluri: "2"
            }, {
                skilllevel: skill + " advanced",
                skillleveluri: "3"
            }, {
                skilllevel: skill + " guru",
                skillleveluri: "4"
            } ]
        }), $scope.searchSkills(skill);
    }, $scope.searchPeople = function(person) {
        return person.length > 0 && ($scope.currentPagePeople = 1), $scope.filterPeople();
    }, $scope.searchSkills = function(skill) {
        return skill.length > 0 && ($scope.currentPageSkills = 1), $scope.filterSkills();
    }, $scope.itemsPerPage = 15, $scope.maxPages = 5, $scope.groupToPages = function(list) {
        for (var pagedList = [], i = 0; list.length > i; i++) 0 === i % $scope.itemsPerPage ? pagedList[Math.floor(i / $scope.itemsPerPage)] = [ list[i] ] : pagedList[Math.floor(i / $scope.itemsPerPage)].push(list[i]);
        return pagedList;
    }, $scope.countPagedList = function(list) {
        var count = 0;
        if (list === void 0) return count;
        for (var i = 0; list.length > i; i++) count += list[i].length;
        return count;
    };
} ]);